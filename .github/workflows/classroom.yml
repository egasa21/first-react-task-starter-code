name: Autograding Tests

on:
  - push
  - workflow_dispatch

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  autograding:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install xml2js
        run: npm install xml2js

      - name: Run tests and generate results
        run: |
          npm test -- --ci --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT: junit.xml

      - name: List files to verify test-results.xml
        run: ls -la

      - name: Create score calculation script
        run: |
          echo 'const fs = require("fs");' > calculate-score.js
          echo 'const xml2js = require("xml2js");' >> calculate-score.js
          echo 'const parser = new xml2js.Parser();' >> calculate-score.js
          echo 'const maxScore = 100;' >> calculate-score.js
          echo 'fs.readFile("junit.xml", (err, data) => {' >> calculate-score.js  # Using junit.xml
          echo '  if (err) {' >> calculate-score.js
          echo '    console.error("Failed to read test results file.");' >> calculate-score.js
          echo '    process.exit(1);' >> calculate-score.js
          echo '  }' >> calculate-score.js
          echo '  parser.parseString(data, (err, result) => {' >> calculate-score.js
          echo '    if (err) {' >> calculate-score.js
          echo '      console.error("Failed to parse test results XML.");' >> calculate-score.js
          echo '      process.exit(1);' >> calculate-score.js
          echo '    }' >> calculate-score.js
          echo '    const testCases = result.testsuites.testsuite.flatMap(suite => suite.testcase || []);' >> calculate-score.js
          echo '    const totalTests = testCases.length;' >> calculate-score.js
          echo '    const passedTests = testCases.filter(tc => !tc.failure).length;' >> calculate-score.js
          echo '    const score = Math.round((passedTests / totalTests) * maxScore);' >> calculate-score.js
          echo '    console.log(`Total tests: ${totalTests}`);' >> calculate-score.js
          echo '    console.log(`Passed tests: ${passedTests}`);' >> calculate-score.js
          echo '    console.log(`Score: ${score}/${maxScore}`);' >> calculate-score.js
          echo '    fs.writeFileSync("score.txt", score.toString());' >> calculate-score.js
          echo '  });' >> calculate-score.js
          echo '});' >> calculate-score.js

      - name: Calculate test score
        run: node calculate-score.js

      - name: Upload score
        uses: actions/upload-artifact@v3
        with:
          name: score
          path: score.txt

      - name: Check for score file
        run: |
          if [ ! -f score.txt ]; then
            echo "Score file not generated. Exiting with failure."
            exit 1
          fi